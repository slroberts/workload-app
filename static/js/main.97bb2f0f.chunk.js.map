{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","setState","defineProperty","target","name","value","handleSubmit","preventDefault","state","input","length","onSubmit","id","shortid","generate","completed","placeholder","react_default","a","createElement","className","onChange","onClick","React","Component","Todo","meta","Date","isInEditMode","changeEditMode","handleEditUpdate","changedTodoText","refs","newTextInput","editViewMode","defaultValue","ref","defaultViewMode","toggleComplete","style","opacity","todo","onDelete","TodoList","addTodo","todos","concat","toConsumableArray","updateTodoToShow","s","todoToShow","handleDelete","filter","map","objectSpread","removeAllComplete","toggleAllComplete","hydrateStateWithLocalStorage","window","addEventListener","saveStateToLocalStorage","bind","removeEventListener","key","localStorage","hasOwnProperty","getItem","JSON","parse","e","setItem","stringify","_this2","TodoForm_TodoForm","Todo_Todo","some","App","TodoList_TodoList","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.97bb2f0f.chunk.js","sourcesContent":["import React from \"react\";\nimport shortid from \"shortid\";\n\nexport default class TodoForm extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tplaceholder: \"ex. Company UI design\",\n\t\t\tinput: \"\"\n\t\t};\n\t}\n\n\thandleChange = event => {\n\t\tthis.setState({\n\t\t\t[event.target.name]: event.target.value\n\t\t});\n\t};\n\n\thandleSubmit = event => {\n\t\tevent.preventDefault();\n\n\t\tif (!this.state.input.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.props.onSubmit({\n\t\t\tid: shortid.generate(),\n\t\t\tinput: this.state.input,\n\t\t\tcompleted: false\n\t\t});\n\n\t\tthis.setState({\n\t\t\tinput: \"\"\n\t\t});\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<form onSubmit={this.handleSubmit}>\n\t\t\t\t<input\n\t\t\t\t\tclassName=\"todo-input\"\n\t\t\t\t\tname=\"input\"\n\t\t\t\t\tplaceholder={this.state.placeholder}\n\t\t\t\t\tvalue={this.state.input}\n\t\t\t\t\tonChange={this.handleChange}\n\t\t\t\t/>\n\t\t\t\t<button\n\t\t\t\t\tclassName=\"todo-button\"\n\t\t\t\t\tname=\"button\"\n\t\t\t\t\tonClick={this.handleSubmit}>\n\t\t\t\t\tAdd to Queue\n\t\t\t\t</button>\n\t\t\t</form>\n\t\t);\n\t}\n}\n","import React from \"react\";\n// import TodoStatus from \"./TodoStatus\";\n\nexport default class Todo extends React.Component {\n\tstate = {\n\t\tmeta: Date(),\n\t\tisInEditMode: false\n\t};\n\n\tcomponentDidMount() {\n\t\tthis.setState({\n\t\t\tchangedTodoText: this.props.todo.input\n\t\t});\n\t}\n\n\tchangeEditMode = () => {\n\t\tthis.setState({\n\t\t\tisInEditMode: !this.state.isInEditMode\n\t\t});\n\t};\n\n\thandleEditUpdate = () => {\n\t\tthis.setState({\n\t\t\tisInEditMode: false,\n\t\t\tchangedTodoText: this.refs.newTextInput.value\n\t\t});\n\t};\n\n\teditViewMode = () => {\n\t\treturn (\n\t\t\t<input\n\t\t\t\tclassName=\"is-editing\"\n\t\t\t\tdefaultValue={this.state.changedTodoText}\n\t\t\t\tref=\"newTextInput\"\n\t\t\t/>\n\t\t);\n\t};\n\n\tdefaultViewMode = () => {\n\t\treturn (\n\t\t\t<div\n\t\t\t\tclassName=\"list-title\"\n\t\t\t\tonClick={this.props.toggleComplete}\n\t\t\t\tstyle={{ opacity: this.props.todo.completed ? 0.5 : \"\" }}>\n\t\t\t\t{this.state.changedTodoText}\n\t\t\t</div>\n\t\t);\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<li className=\"todo-list-item\">\n\t\t\t\t{this.state.isInEditMode ? this.editViewMode() : this.defaultViewMode()}\n\n\t\t\t\t{this.state.isInEditMode === false ? (\n\t\t\t\t\t<button className=\"edit\" onClick={this.changeEditMode}>\n\t\t\t\t\t\tedit <i className=\"far fa-edit\" />\n\t\t\t\t\t</button>\n\t\t\t\t) : (\n\t\t\t\t\t<button className=\"save\" onClick={this.handleEditUpdate}>\n\t\t\t\t\t\tsave <i className=\"far fa-save\" />\n\t\t\t\t\t</button>\n\t\t\t\t)}\n\t\t\t\t<button className=\"notes\">\n\t\t\t\t\tnotes <i className=\"far fa-sticky-note\" />\n\t\t\t\t</button>\n\t\t\t\t<button className=\"delete\" onClick={this.props.onDelete}>\n\t\t\t\t\tdelete <i className=\"far fa-trash-alt\" />\n\t\t\t\t</button>\n\t\t\t\t<div className=\"meta\">{this.state.meta}</div>\n\n\t\t\t\t{/* <TodoStatus /> */}\n\t\t\t</li>\n\t\t);\n\t}\n}\n","import React from \"react\";\nimport TodoForm from \"./TodoForm\";\nimport Todo from \"./Todo\";\n\nexport default class TodoList extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\ttodos: [],\n\t\t\ttodoToShow: \"all\",\n\t\t\ttoggleAllComplete: true\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.hydrateStateWithLocalStorage();\n\n\t\t// add event listener to save state to localStorage\n\t\t// when user leaves/refreshes the page\n\t\twindow.addEventListener(\n\t\t\t\"beforeunload\",\n\t\t\tthis.saveStateToLocalStorage.bind(this)\n\t\t);\n\t}\n\n\tcomponentWillUnmount() {\n\t\twindow.removeEventListener(\n\t\t\t\"beforeunload\",\n\t\t\tthis.saveStateToLocalStorage.bind(this)\n\t\t);\n\n\t\t// saves if component has a chance to unmount\n\t\tthis.saveStateToLocalStorage();\n\t}\n\n\thydrateStateWithLocalStorage() {\n\t\t// for all items in state\n\t\tfor (let key in this.state) {\n\t\t\t// if the key exists in localStorage\n\t\t\tif (localStorage.hasOwnProperty(key)) {\n\t\t\t\t// get the key's value from localStorage\n\t\t\t\tlet value = localStorage.getItem(key);\n\n\t\t\t\t// parse the localStorage string and setState\n\t\t\t\ttry {\n\t\t\t\t\tvalue = JSON.parse(value);\n\t\t\t\t\tthis.setState({ [key]: value });\n\t\t\t\t} catch (e) {\n\t\t\t\t\t// handle empty string\n\t\t\t\t\tthis.setState({ [key]: value });\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tsaveStateToLocalStorage() {\n\t\t// for every item in React state\n\t\tfor (let key in this.state) {\n\t\t\t// save to localStorage\n\t\t\tlocalStorage.setItem(key, JSON.stringify(this.state[key]));\n\t\t}\n\t}\n\n\taddTodo = todo => {\n\t\tthis.setState(state => ({\n\t\t\ttodos: [todo, ...state.todos]\n\t\t}));\n\t};\n\n\tupdateTodoToShow = s => {\n\t\tthis.setState({\n\t\t\ttodoToShow: s\n\t\t});\n\t};\n\n\thandleDelete = id => {\n\t\tthis.setState(state => ({\n\t\t\ttodos: state.todos.filter(todo => todo.id !== id)\n\t\t}));\n\t};\n\n\ttoggleComplete = id => {\n\t\tthis.setState(state => ({\n\t\t\ttodos: state.todos.map(todo => {\n\t\t\t\tif (todo.id === id) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...todo,\n\t\t\t\t\t\tcompleted: !todo.completed\n\t\t\t\t\t};\n\t\t\t\t} else {\n\t\t\t\t\treturn todo;\n\t\t\t\t}\n\t\t\t})\n\t\t}));\n\t};\n\n\tremoveAllComplete = () => {\n\t\tthis.setState(state => ({\n\t\t\ttodos: state.todos.filter(todo => !todo.completed)\n\t\t}));\n\t};\n\n\ttoggleAllComplete = () => {\n\t\tthis.setState(state => ({\n\t\t\ttodos: state.todos.map(todo => ({\n\t\t\t\t...todo,\n\t\t\t\tcompleted: state.toggleAllComplete\n\t\t\t})),\n\t\t\ttoggleAllComplete: !state.toggleAllComplete\n\t\t}));\n\t};\n\n\trender() {\n\t\tlet todos = [];\n\n\t\tif (this.state.todoToShow === \"all\") {\n\t\t\ttodos = this.state.todos;\n\t\t} else if (this.state.todoToShow === \"active\") {\n\t\t\ttodos = this.state.todos.filter(todo => !todo.completed);\n\t\t} else if (this.state.todoToShow === \"completed\") {\n\t\t\ttodos = this.state.todos.filter(todo => todo.completed);\n\t\t}\n\t\t// else if (this.state.todos.todoToShow === \"queued\") {\n\t\t// \ttodos = this.state.todos.filter(todo => todo.queued);\n\t\t// }\n\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<TodoForm onSubmit={this.addTodo} />\n\t\t\t\t<ul className=\"todo-list-container\">\n\t\t\t\t\t{todos.map(todo => (\n\t\t\t\t\t\t<Todo\n\t\t\t\t\t\t\tkey={todo.id}\n\t\t\t\t\t\t\ttoggleComplete={() => this.toggleComplete(todo.id)}\n\t\t\t\t\t\t\tonDelete={() => this.handleDelete(todo.id)}\n\t\t\t\t\t\t\ttodo={todo}\n\t\t\t\t\t\t/>\n\t\t\t\t\t))}\n\t\t\t\t</ul>\n\t\t\t\t{this.state.todos.some(todo => todo) ? (\n\t\t\t\t\t<div className=\"notifications\">\n\t\t\t\t\t\t<div className=\"todo-counter\">\n\t\t\t\t\t\t\tTodos left:{\" \"}\n\t\t\t\t\t\t\t{this.state.todos.filter(todo => !todo.completed).length}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"filters\">\n\t\t\t\t\t\t\t<button onClick={() => this.updateTodoToShow(\"all\")}>All</button>\n\t\t\t\t\t\t\t<button onClick={() => this.updateTodoToShow(\"active\")}>\n\t\t\t\t\t\t\t\tActive\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t<button onClick={() => this.updateTodoToShow(\"completed\")}>\n\t\t\t\t\t\t\t\tCompleted\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t{/* <button onClick={() => this.updateTodoToShow(\"queued\")}>\n\t\t\t\t\t\t\t\tQueued\n\t\t\t\t\t\t\t</button> */}\n\t\t\t\t\t\t\t{/* <button onClick={this.toggleAllComplete}>\n\t\t\t\t\t\t\t\tToggle All: {`${this.state.toggleAllComplete}`}\n\t\t\t\t\t\t\t</button> */}\n\t\t\t\t\t\t\t{this.state.todos.some(todo => todo.completed) ? (\n\t\t\t\t\t\t\t\t<button onClick={this.removeAllComplete}>\n\t\t\t\t\t\t\t\t\tRemove All Completed Items\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t) : null}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t) : null}\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import React from \"react\";\nimport \"../src/scss/style.scss\";\nimport TodoList from \"./components/TodoList\";\n\nclass App extends React.Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"todo-container\">\n\t\t\t\t<div className=\"todo-input-container\">\n\t\t\t\t\t<h1>workload.</h1>\n\t\t\t\t\t<p>Stay up-to-date with projects and their statuses.</p>\n\n\t\t\t\t\t<TodoList />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}